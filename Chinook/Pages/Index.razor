@page "/"
@attribute [Authorize]

@using Azure.Core;
@using Chinook.Models
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.ViewFeatures;
@using Microsoft.EntityFrameworkCore
@using Chinook.Repositories.Interfaces;
@using System.Collections.Generic;
@inject IArtistRepository _artistRepository;

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    <EditForm EditContext=Context>
        <p>
            Title: <InputText @bind-Value="SearchString" class="form-control" />
            <button class="btn btn-primary" @onclick="OnSearchButtonClick"> Search </button>
        </p>
    </EditForm>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> originalArtists;
    private List<Artist> Artists;
    private EditContext Context;
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }

    public string SearchString { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        Context = new EditContext(SearchString);
        Artists = await GetArtists();
        originalArtists = Artists;
    }

    public async Task<List<Artist>> GetArtists()
    {
        return _artistRepository.GetAllArtists().ToList();
    }

    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();

    }
    private async Task OnSearchButtonClick()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            Artists = originalArtists.Where(s => s.Name.ToLower().Contains(SearchString.ToLower())).ToList();
        }
        else
        {
            Artists = await GetArtists();
            originalArtists = Artists;
        }
        this.StateHasChanged();
    }
}
